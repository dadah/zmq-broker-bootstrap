{
  "author": {
    "name": "Lloyd Hilaiel",
    "email": "lloyd@hilaiel.com",
    "url": "http://lloyd.io"
  },
  "name": "convict",
  "description": "Unruly configuration management for nodejs",
  "version": "0.4.2",
  "homepage": "https://github.com/mozilla/node-convict",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/node-convict.git"
  },
  "main": "lib/convict.js",
  "engines": {
    "node": ">=0.4.7"
  },
  "dependencies": {
    "cjson": "0.3.0",
    "validator": "1.5.1",
    "moment": "2.3.1",
    "optimist": "0.6.0"
  },
  "devDependencies": {
    "obj_diff": "0.3.0",
    "should": "2.0.1",
    "mocha": "1.13.0"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "bugs": {
    "url": "https://github.com/mozilla/node-convict/issues"
  },
  "licenses": {
    "type": "Apache",
    "url": "https://raw.github.com/mozilla/node-convict/master/LICENSE"
  },
  "readme": "# node-convict [!['Build status'][travis_image_url]][travis_page_url]\n\n[travis_image_url]: https://api.travis-ci.org/mozilla/node-convict.png\n[travis_page_url]: https://travis-ci.org/mozilla/node-convict\n\nConvict expands on the standard pattern of configuring node.js applications in a way that is more robust and accessible to collaborators, who may have less interest in digging through imperative code in order to inspect or modify settings. By introducting a configuration schema, convict gives project collaborators more **context** on each setting and enables **validation and early failures** for when configuration goes wrong.\n\n\n## Features\n* **Loading and merging**: configurations are loaded from disk or inline and merged. JSON files are loaded with `cjson` so comments are welcome.\n* **Environmental variables**: values can be derived from environmental variables\n* **Command-line arguments**: values can also be derived from command-line arguments\n* **Validation**: configurations are validated against your schema, generating an error report with all errors that are found\n\n## Install\n\n    npm install convict\n\n## Example:\n\n\nAn example `config.js`:\n\n    var convict = require('convict');\n\n    // define a schema\n\n    var conf = convict({\n      env: {\n        doc: \"The applicaton environment.\",\n        format: [\"production\", \"development\", \"test\"],\n        default: \"development\",\n        env: \"NODE_ENV\"\n      },\n      ip: {\n        doc: \"The IP address to bind.\",\n        format: \"ipaddress\",\n        default: \"127.0.0.1\",\n        env: \"IP_ADDRESS\",\n      },\n      port: {\n        doc: \"The port to bind.\",\n        format: \"port\",\n        default: 0,\n        env: \"PORT\"\n      }\n    });\n\n\n    // load environment dependent configuration\n\n    var env = conf.get('env');\n    conf.loadFile('./config/' + env + '.json');\n\n    // perform validation\n\n    conf.validate();\n\n    module.exports = conf;\n\n\n### Usage\n\n    var http = require('http');\n    var conf = require('./config.js');\n\n    var server = http.createServer(function (req, res) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Hello World\\n');\n    });\n\n    // consume\n    server.listen(conf.get('port'), conf.get('ip'), function(x) {\n      var addy = server.address();\n      console.log('running on http://' + addy.address + \":\" + addy.port);\n    });\n\n\n## The Schema\nA configuration module could look like this:\n\nconfig.js:\n\n    var config = module.exports = convict({\n      env: {\n        doc: \"The application environment.\",\n        format: [\"production\", \"development\", \"test\"],\n        default: \"development\",\n        env: \"NODE_ENV\",\n        arg: \"node-env\",\n      }\n    });\n\n    config.loadFile(['./prod.json', './config.json']);\n\nEach setting in the schema has four possible properties, each aiding in convict's goal of being more robust and collaborator friendly.\n\n* **Type information**: the `format` property specifies either a built-in convict format (`ipaddress`, `port`, `int`, etc.), or it can be a function to check a custom format. During validation, if a format check fails it will be added to the error report.\n* **Default values**:  Every setting *must* have a default value.\n* **Environmental variables**: If the variable specified by `env` has a value, it will overwrite the setting's default value.\n* **Command-line arguments**: If the command-line argument specified by `arg` is supplied, it will overwrite the setting's default value or the value derived from `env`.\n* **Documentation**: The `doc` property is pretty self-explanatory. The nice part about having it in the schema rather than as a comment is that we can call `conf.toSchemaString()` and have it displayed in the output.\n\n### Validation\nIn order to help detect misconfigurations, convict allows you to define a format for each setting. By defualt, convict checks if the value of the property has the same type (according to `Object.prototype.toString.call`) as the default value specified in the schema. You can define a custom format checking function in the schema by setting the `format` property.\n\nconvict provides serveral predefined formats for validation that you can use ([using node-validator](https://github.com/chriso/node-validator#list-of-validation-methods) and [moment.js](http://momentjs.com/)). Most of them are self-explanatory:\n\n* `*` - any value is valid\n* `int`\n* `port`\n* `url`\n* `email`\n* `ipaddress` - IPv4 addresses\n* `duration` - miliseconds or a human readable string (e.g. \"5 days\")\n* `timestamp` - Unix timestamps or date strings recognized by [moment.js](http://momentjs.com/)\n* `nat` - positive integer (natural number)\n\nIf `format` is set to one of the built-in JavaScript constructors, `Object`, `Array`, `String`, `Number`, or `Boolean`, validation will use Object.prototype.toString.call to check that the setting is the proper type.\n\nYou can also provide your own format checking function. For example:\n\n    var check = require('validator').check;\n\n    var conf = convict({\n        key: {\n          doc: \"API key\",\n          format: function (val) {\n            check(val, 'should be a 64 character hex key').regex(/^[a-fA-F0-9]{64}$/);\n          },\n          default: '3cec609c9bc601c047af917a544645c50caf8cd606806b4e0a23312441014deb'\n        }\n      });\n\n### Coercion\n\nConvict will automatically coerce environmental variables from strings to their proper types when importing them. For instance, values with the format `int`, `nat`, `port`, or `Number` will become numbers after a straight forward `parseInt` or `parseFloat`. `duration` and `timestamp` are also parse and converted into numbers, though they utilize [moment.js](http://momentjs.com/) for date parsing.\n\n## API\n\n### var config = convict(schema)\n`convict()` takes a schema object and returns a convict configuration object. The configuration object has an API for getting and setting values, described below.\n\n### config.get(name)\nReturns the current value of the `name` property. `name` can use dot notation to reference nested values. E.g.:\n\n    config.get('database.host');\n\n    // or\n\n    config.get('database').host;\n\n### config.default(name)\nReturns the default value of the `name` property. `name` can use dot notation to reference nested values. E.g.:\n\n    config.default('server.port');\n\n### config.has(name)\nReturns `true` if the property `name` is defined, or `false` otherwise. E.g.:\n\n    if (config.has('some.property')) {\n      // do something\n    }\n\n### config.set(name, value)\nSets the value of `name` to value. `name` can use dot notation to reference nested values, e.g. `\"database.port\"`. If objects in the chain don't yet exist, they will be initialized to empty objects. E.g.:\n\n    config.set('property.that.may.not.exist.yet', 'some value');\n    config.get('property.that.may.not.exist.yet');\n    // returns \"some value\"\n\n### config.load(object)\nThis will load and merge a JavaScript object into `config`. E.g.:\n\n    config.load({\n      \"env\": \"test\",\n      \"ip\": \"127.0.0.1\",\n      \"port\": 80\n    });\n\n### config.loadFile(file or [file1, file2, ...])\nThis will load and merge one or multiple JSON configuration files into `config`. JSON files are loaded using `cjson`, so they can contain comments. E.g.:\n\n    conf.loadFile('./config/' + conf.get('env') + '.json');\n\nOr, loading multiple files at once:\n\n    // CONFIG_FILES=/path/to/production.json,/path/to/secrets.json,/path/to/sitespecific.json\n    conf.loadFile(process.env.CONFIG_FILES.split(','));\n\n\n### config.validate()\nValidates `config` against the schema used to initialize it. All errors are collected and thrown at once.\n\n",
  "readmeFilename": "README.md",
  "_id": "convict@0.4.2",
  "_from": "convict@^0.4.2"
}
